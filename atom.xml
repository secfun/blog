<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[secfun]]></title>
  <link href="http://blog.esile.me/atom.xml" rel="self"/>
  <link href="http://blog.esile.me/"/>
  <updated>2016-11-17T20:54:16+08:00</updated>
  <id>http://blog.esile.me/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[AMQP协议]]></title>
    <link href="http://blog.esile.me/14793659525228.html"/>
    <updated>2016-11-17T14:59:12+08:00</updated>
    <id>http://blog.esile.me/14793659525228.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用命令备忘]]></title>
    <link href="http://blog.esile.me/14793567225986.html"/>
    <updated>2016-11-17T12:25:22+08:00</updated>
    <id>http://blog.esile.me/14793567225986.html</id>
    <content type="html"><![CDATA[
<ul>
<li>rsync 非默认端口连接
<code>rsync -avz -e &quot;ssh -p 10086&quot; user@host:/path/to/file</code></li>
<li>ssh 登录调试
<code>ssh -vT user@host</code></li>
<li>生成rsa key
<code>ssh-keygen -t rsa -C comment</code></li>
<li>pip change repo
<code>pip install xxx -i</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python import]]></title>
    <link href="http://blog.esile.me/14791926847943.html"/>
    <updated>2016-11-15T14:51:24+08:00</updated>
    <id>http://blog.esile.me/14791926847943.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">先验知识</h2>

<ul>
<li><p>module in python</p>

<p>A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py appended. Within a module, the module’s name (as a string) is available as the value of the global variable <strong>name</strong>.</p>

<p>They are executed only the first time the module name is encountered in an import statement. </p>

<p>module can be excuted as script by -m switch</p></li>
<li><p>dir()</p>

<p>Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.</p></li>
<li><p>sys.modules</p>

<p>存储着已经加载的module</p></li>
<li><p>sys.path</p>

<p>module的搜索路径， 第一个为空，表示是当前运行python文件的文件夹。</p></li>
<li><p>sys.meta_path</p>

<p>A list of finder objects that have their find_module() methods called to see if one of the objects can find the module to be imported. The find_module() method is called at least with the absolute name of the module being imported. If the module to be imported is contained in package then the parent package’s <strong>path</strong> attribute is passed in as a second argument. The method returns None if the module cannot be found, else returns a loader.</p>

<p>sys.meta_path is searched before any implicit default finders or sys.path.`</p></li>
<li><p>package<br/>
    package is a collection of module<br/>
    from package import item, the item can be either a submodule (or subpackage) of the package<br/>
    from xx import subpackage/module/object<br/>
    import subpackage/module</p></li>
<li><p>-m的作用</p>

<p>指定运行脚本的package和name<br/>
python a.py a的__name__属性为__main__<br/>
python -m some_dir.a a的__package__为some_dir <strong>name</strong>为a</p></li>
<li><p>__package__</p>

<p>解决相对引用下包定位的问题</p>

<pre><code>ex1/
    foo.py
    main.py
</code></pre>

<pre><code class="language-python">foo.py
a=10
</code></pre>

<pre><code class="language-main.py">from . import foo
</code></pre>

<p>如果直接在ex1下执行： python main.py 会报<code>ValueError: Attempted relative import in non-package</code>, 原因是main的__package__为空<br/>
但是可以通过 python -m ex1.main来解决</p></li>
<li><p>__name__</p>

<p>当前module的name</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[celery]]></title>
    <link href="http://blog.esile.me/14791909799046.html"/>
    <updated>2016-11-15T14:22:59+08:00</updated>
    <id>http://blog.esile.me/14791909799046.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[multi thread]]></title>
    <link href="http://blog.esile.me/14791359815853.html"/>
    <updated>2016-11-14T23:06:21+08:00</updated>
    <id>http://blog.esile.me/14791359815853.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">what&#39;s join mean in thread</h2>

<p>You can wait for a thread to finish by calling its join() method. For instance, in the following code, the current thread will wait until thread2 finishes before printing Done.</p>

<p>thread2.start();<br/>
// do more stuff here<br/>
thread2.join();<br/>
System.out.println(&quot;Done&quot;);</p>

<h2 id="toc_1">thread synchronization</h2>

<ul>
<li><p>mutex</p></li>
<li><p>cond</p></li>
<li><p>p and v<br/>
原语，不可中断的过程<br/>
Dijkstra, one of the inventors of semaphores, used P and V. The letters come from the Dutch words Probeer (try) and Verhoog (increment).</p></li>
</ul>

<h2 id="toc_2">new thread funtion</h2>

<pre><code class="language-c"> int pthread_create(pthread_t * thread, 
                       const pthread_attr_t * attr,
                       void * (*start_routine)(void *), 
                       void *arg);
</code></pre>

<h2 id="toc_3">几个多线程的问题</h2>

<h4 id="toc_4">生产者消费者</h4>

<h4 id="toc_5">读者写者</h4>

<h4 id="toc_6">哲学家进餐</h4>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[void *]]></title>
    <link href="http://blog.esile.me/14791190693458.html"/>
    <updated>2016-11-14T18:24:29+08:00</updated>
    <id>http://blog.esile.me/14791190693458.html</id>
    <content type="html"><![CDATA[
<p>A pointer to void is a &quot;generic&quot; pointer type. A void * can be converted to any other pointer type without an explicit cast. You cannot dereference a void * or do pointer arithmetic with it; you must convert it to a pointer to an complete data type first.</p>

<p>It gets used in places where you need to be able to work with different pointer types in the same code. One commonly cited example is the library function qsort:</p>

<pre><code class="language-c">void qsort(void *base, size_t nmemb, size_t size, 
           int (*compar)(const void *, const void *));
</code></pre>

<p>base is the address of an array, nmemb is the number of elements in the array, size is the size of each element, and compar is a pointer to a function that compares two elements of the array. It gets called like so:</p>

<pre><code class="language-c">int iArr[10];
double dArr[30];
long lArr[50];
...
qsort(iArr, sizeof iArr/sizeof iArr[0], sizeof iArr[0], compareInt);
qsort(dArr, sizeof dArr/sizeof dArr[0], sizeof dArr[0], compareDouble);
qsort(lArr, sizeof lArr/sizeof lArr[0], sizeof lArr[0], compareLong);
</code></pre>

<p>The array expressions iArr, dArr, and lArr are implicitly converted from array types to pointer types in the function call, and each is implicitly converted from &quot;pointer to int/double/long&quot; to &quot;pointer to void&quot;.</p>

<p>The comparison functions would look something like:</p>

<pre><code class="language-c">int compareInt(const void *lhs, const void *rhs)
{
  const int *x = lhs;  // convert void * to int * by assignment
  const int *y = rhs;

  if (*x &gt; *y) return 1;
  if (*x == *y) return 0;
  return -1;
}
</code></pre>

<p>By accepting void *, qsort can work with arrays of any type.</p>

<p>The disadvantage of using void * is that you throw type safety out the window and into oncoming traffic. There&#39;s nothing to protect you from using the wrong comparison routine:</p>

<p><code>qsort(dArr, sizeof dArr/sizeof dArr[0], sizeof dArr[0], compareInt);</code><br/>
compareInt is expecting its arguments to be pointing to ints, but is actually working with doubles. There&#39;s no way to catch this problem at compile time; you&#39;ll just wind up with a mis-sorted array.</p>

<h4 id="toc_0">void * and const void * in c</h4>

<p>A const void * points to memory that should not be modified.</p>

<p>A void * (non-const) points to memory that could be modified (but not via the void *; you&#39;d have to cast it first).</p>

<p>When you use memmove(), the source address is cast to const void *:</p>

<p>void *memmove(void *dst, const void *src, size_t nbytes);<br/>
That is an illustration when a void pointer can be cast to a constant void pointer. Basically, you can do it (convert to constant) at any time when you know you are not going to modify the memory that the pointer points at. This applies to any pointer - not just void pointers.</p>

<p>Converting the other way (from a constant pointer to a non-constant pointer) is a much more dangerous exercise. There&#39;s no guarantee that the memory pointed at actually is modifiable; for example, a string literal can be stored in readonly (constant) memory, and if you lose the const-ness with a cast and try to modify the string, you will likely get a segmentation fault or its equivalent - your program will stop suddenly and not under your control. This is not a good thing. So, do not change pointers from constant to non-constant without being very sure it is actually OK to lie to your compiler. Be aware that compilers do not like being lied to and can get their own back, usually at the most inconvenient moment (such as when demonstrating your program to an important prospective client in front of your boss, your boss&#39;s boss, and your boss&#39;s boss&#39;s boss).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用docker来持续集成]]></title>
    <link href="http://blog.esile.me/14773745036118.html"/>
    <updated>2016-10-25T13:48:23+08:00</updated>
    <id>http://blog.esile.me/14773745036118.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[post中的content-type]]></title>
    <link href="http://blog.esile.me/14721979511946.html"/>
    <updated>2016-08-26T15:52:31+08:00</updated>
    <id>http://blog.esile.me/14721979511946.html</id>
    <content type="html"><![CDATA[
<p>http的post协议可以把提交的内容放在http request body中，数据格式常见的有以下几种，针对不同的数据格式，服务端需要不同的解码方式。</p>

<ul>
<li><p>application/x-www-form-urlencoded</p></li>
<li><p>multipart/form-data</p></li>
<li><p>application/json</p></li>
<li><p>text/xml</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
